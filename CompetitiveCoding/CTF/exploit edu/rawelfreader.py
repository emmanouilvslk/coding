import subprocess
import re

def get_section_offset_size(elf_file, section_name):
    cmd = f'readelf -S {elf_file}'
    output = subprocess.check_output(cmd, shell=True).decode()
    section_pattern = re.compile(r'\s*\[\s*\d+\]\s+' + re.escape(section_name) + r'\s+\S+\s+(\S+)\s+(\S+)\s+(\S+)\s+')
    match = section_pattern.search(output)
    if match:
        return int(match.group(1), 16), int(match.group(2), 16)
    else:
        raise ValueError(f"Section {section_name} not found in {elf_file}")

def extract_shellcode(elf_file, section_name):
    offset, size = get_section_offset_size(elf_file, section_name)
    with open(elf_file, 'rb') as f:
        f.seek(offset)
        shellcode = f.read(size)
        return shellcode

def format_shellcode(shellcode):
    return ''.join(f'{b:02x}' for b in shellcode)

elf_file = 'shell-x64.elf'
section_name = '.text'  # Change this to the appropriate section name
shellcode = extract_shellcode(elf_file, section_name)
formatted_shellcode = format_shellcode(shellcode)
print(formatted_shellcode)
